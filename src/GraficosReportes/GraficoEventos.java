/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GraficosReportes;

import GestorUsuarios.UsuariosInfo;
import Reportes_Interfaz.EventosCancelados;
import Reportes_Interfaz.EventosFuturos;
import Reportes_Interfaz.EventosPorFecha;
import Reportes_Interfaz.EventosRealizados;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import javaticket.Main_JavaTicket;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author jenniferbueso
 */
public class GraficoEventos extends javax.swing.JFrame {
    private UsuariosInfo usuarioLogueado;
    private EventosPorFecha eventosPorFecha;
    private static GraficoEventos instance;
    private String deportivoString = "0", musicalString = "0", religiosoString = "0";
    private boolean dibujarGrafico = false;
    
    public GraficoEventos(UsuariosInfo usuarioLogueado) {
        this.usuarioLogueado = usuarioLogueado;
        
        initComponents();

        if (Main_JavaTicket.gestionarGraficos.isEventosRealizados()) {
            deportivoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorDeportivoRealizado());
            musicalString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorMusicalRealizado());
            religiosoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorReligiosoRealizado());
        } else if (Main_JavaTicket.gestionarGraficos.isEventosFuturos()) {
            deportivoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorDeportivoFuturo());
            musicalString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorMusicalFuturo());
            religiosoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorReligiosoFuturo());
        } else if (Main_JavaTicket.gestionarGraficos.isEventosCancelados()) {
            deportivoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorDeportivoCancelado());
            musicalString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorMusicalCancelado() );
            religiosoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contadorReligiosoCancelado());
        } else if (Main_JavaTicket.gestionarGraficos.isEventosPorFecha()) {
            deportivoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contarEventosDeportivosFecha(Main_JavaTicket.gestionarGraficos.getFechaInicial(), Main_JavaTicket.gestionarGraficos.getFechaFinal()));
            musicalString = String.valueOf(Main_JavaTicket.gestionarGraficos.contarEventosMusicalesFecha(Main_JavaTicket.gestionarGraficos.getFechaInicial(), Main_JavaTicket.gestionarGraficos.getFechaFinal()));
            religiosoString = String.valueOf(Main_JavaTicket.gestionarGraficos.contarEventosReligiososFecha(Main_JavaTicket.gestionarGraficos.getFechaInicial(), Main_JavaTicket.gestionarGraficos.getFechaFinal()));
        }
        
        if (Double.parseDouble(deportivoString) == 0 && Double.parseDouble(musicalString) == 0 && Double.parseDouble(religiosoString) == 0) {
            AvisoLabel.setText("Actualmente no disponemos de los datos necesarios para generar el gráfico.");
        } else {
            dibujarGrafico = true;
        }
        
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BotonRegresar = new javax.swing.JLabel();
        AvisoLabel = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BotonRegresarMouseClicked(evt);
            }
        });
        jPanel1.add(BotonRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 110, 50, 40));

        AvisoLabel.setFont(new java.awt.Font("Avenir Next Condensed", 1, 14)); // NOI18N
        AvisoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(AvisoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, 550, 120));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Elementos/Grafico.png"))); // NOI18N
        jPanel1.add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 678, 550));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BotonRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BotonRegresarMouseClicked
        if (Main_JavaTicket.gestionarGraficos.isEventosRealizados()) {
            EventosRealizados eventosRealizados = new EventosRealizados(usuarioLogueado);
            eventosRealizados.setVisible(true);
            this.setVisible(false);
            todoFalse();
        } else if (Main_JavaTicket.gestionarGraficos.isEventosFuturos()) {
            EventosFuturos eventosFuturos = new EventosFuturos(usuarioLogueado);
            eventosFuturos.setVisible(true);
            this.setVisible(false);
            todoFalse();
        } else if (Main_JavaTicket.gestionarGraficos.isEventosCancelados()) {
            EventosCancelados eventosCancelados = new EventosCancelados(usuarioLogueado);
            eventosCancelados.setVisible(true);
            this.setVisible(false);
            todoFalse();
        } else if (Main_JavaTicket.gestionarGraficos.isEventosPorFecha()) {
            if (Main_JavaTicket.eventosPorFecha != null) {
                Main_JavaTicket.eventosPorFecha.setVisible(true);
            }
            this.setVisible(false);
        }
    }//GEN-LAST:event_BotonRegresarMouseClicked

    public void paint(Graphics g){
        super.paint(g);
        
        if (dibujarGrafico) {
            int deportivoInt = Math.round(Float.parseFloat(deportivoString));
            int musicalInt = Math.round(Float.parseFloat(musicalString));
            int religiosoInt = Math.round(Float.parseFloat(religiosoString));

            int total_votos = deportivoInt + musicalInt + religiosoInt;

            int deportivoGrados = 0;
            int musicalGrados = 0;
            int religiosoGrados = 0;

            if (total_votos != 0) {
                deportivoGrados = deportivoInt * 360 / total_votos;
                musicalGrados = musicalInt * 360 / total_votos;
                religiosoGrados = religiosoInt * 360 / total_votos;
            }

            // Calcula el centro del panel
            int centroX = getWidth() / 2;
            int centroY = getHeight() / 2;

            // Define el tamaño del gráfico
            int tamañoGrafico = 320;

            // Calcula la posición del gráfico para que esté centrado
            int graficoX = centroX - tamañoGrafico / 2;
            int graficoY = centroY - tamañoGrafico / 2 + 60;

            // Dibuja el gráfico
            g.setColor(new Color(255, 100, 114));
            g.fillArc(graficoX, graficoY, tamañoGrafico, tamañoGrafico, 0, deportivoGrados);
            g.setColor(new Color(255, 200, 203));
            g.fillArc(graficoX, graficoY, tamañoGrafico, tamañoGrafico, deportivoGrados, musicalGrados);
            g.setColor(new Color(198, 47, 82));
            g.fillArc(graficoX, graficoY, tamañoGrafico, tamañoGrafico, deportivoGrados + musicalGrados, religiosoGrados);

            // Dibuja un borde alrededor del gráfico
            g.setColor(Color.BLACK);
            g.drawArc(graficoX, graficoY, tamañoGrafico, tamañoGrafico, 0, 360);

            // Calcula los porcentajes
            float deportivoPorcentaje = (float) deportivoInt / total_votos * 100;
            float musicalPorcentaje = (float) musicalInt / total_votos * 100;
            float religiosoPorcentaje = (float) religiosoInt / total_votos * 100;

            // Modifica las etiquetas para incluir los porcentajes
            String[] labels = {
                "Deportivo: " + String.format("%.2f", deportivoPorcentaje) + "%",
                "Musical: " + String.format("%.2f", musicalPorcentaje) + "%",
                "Religioso: " + String.format("%.2f", religiosoPorcentaje) + "%"
            };

            // Define los colores para las etiquetas
            Color[] labelColors = {new Color(255, 100, 114), new Color(255, 200, 203), new Color(198, 47, 82)};

            // Define la posición de las etiquetas
            int labelX = centroX + tamañoGrafico / 2 - 10;
            int labelY = centroY - tamañoGrafico / 2 + 330;

            // Cambia la tipografía y el tamaño del texto
            g.setFont(new Font("Avenir Next Condensed", Font.BOLD, 16));

            // Dibuja las etiquetas con los colores correspondientes
            for (int i = 0; i < labels.length; i++) {
                g.setColor(labelColors[i]);
                g.fillRect(labelX, labelY + i * 20, 10, 10);
                g.setColor(Color.BLACK);
                g.drawString(labels[i], labelX + 15, labelY + i * 20 + 10);
            }
        }
    }
    
    public void todoFalse() {
        Main_JavaTicket.gestionarGraficos.setEventosCancelados(false);
        Main_JavaTicket.gestionarGraficos.setEventosFuturos(false);
        Main_JavaTicket.gestionarGraficos.setEventosPorFecha(false);
        Main_JavaTicket.gestionarGraficos.setEventosRealizados(false);
    }
   
    public static GraficoEventos getInstance(UsuariosInfo usuarioLogueado) {
        if (instance == null) {
            instance = new GraficoEventos(usuarioLogueado);
        }
        return instance;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficoEventos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficoEventos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficoEventos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficoEventos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficoEventos(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AvisoLabel;
    private javax.swing.JLabel BotonRegresar;
    private javax.swing.JLabel Fondo;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
